<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>health</title>
    <url>/2020/04/02/health/</url>
    <content><![CDATA[<p>使用maven来搭建工程,SOA面向服务架构(管理平台通过dubbo消费服务)</p>
<p>体检机构,管理员,医生,患者</p>
<h2 id="技术架构"><a href="#技术架构" class="headerlink" title="技术架构:"></a>技术架构:</h2><p>前端:HTML5,bootstrap,ElementUI,Vue.js,ajax</p>
<p>分布式架构:dubbo(分布式远程调用)+zookeeper(注册中心),springMVC </p>
<p>权限控制:spring security</p>
<p>分布式版本控制:Git</p>
<p>任务调度:Quartz(定时清理垃圾图片)</p>
<p>消息中间件:RabbitMQ(异步处理静态页面的生成)</p>
<p>模板引擎:Freemarker(不常变动的页面)</p>
<p>Excel报表:Apache POI</p>
<p>图形报表:Echarts</p>
<p>持久化:MyBatis,MySQL,Redis</p>
<p>第三方服务:阿里云(短信),七牛云(存储),微信(公众号)</p>
<p>tomcat:web容器</p>
<h2 id="功能架构"><a href="#功能架构" class="headerlink" title="功能架构:"></a>功能架构:</h2><p>管理后台(会员管理,预约,),管理前台(移动端,会员管理,预约)</p>
<p>通过dubbo调用服务端服务 </p>
<p>通过MyBatis框架操作MySQL数据库</p>
<h2 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h2><p>实体类,消息常量类,返回结果Result和PageResult类,封装查询条件(页码,每页记录数,查询条件)的类</p>
<p>html、js、css、图片等静态资源</p>
<h2 id="预约功能"><a href="#预约功能" class="headerlink" title="预约功能"></a>预约功能</h2><p>检查项,检查组,体检套餐,预约设置等管理</p>
<p>检查项:</p>
<p>​    新增检查项:弹出新增窗口,输入校验,提交表单数据(校验),分页(双向绑定,Mybatis分页助手插件PageHelper)</p>
<p>​    删除检查项:确认弹出窗口($confirm信息弹框),不能直接删除，需要判断是否关联</p>
<p>​    编辑检查项:</p>
<p>检查组:</p>
<p>​    新增检查组:弹出新增窗口,动态展示检查项列表,</p>
<h2 id="图片存储"><a href="#图片存储" class="headerlink" title="图片存储"></a>图片存储</h2><blockquote>
<p>常见的图片存储方案：</p>
<p>方案一：使用nginx搭建图片服务器</p>
<p>方案二：使用开源的分布式文件存储系统，例如Fastdfs、HDFS等</p>
<p>方案三：使用云存储，例如阿里云、<strong>七牛云</strong>等</p>
</blockquote>
<p><strong>图片上传并预览:</strong></p>
<p>​    ElementUI提供的上传组件el-upload,定义模型数据,定义上传组件,钩子函数(上传成功的操作,上传之前的判断),spring配置文件中配置文件上传组件</p>
<p><strong>完善文件上传:</strong></p>
<p>​    利用redis保存图片名,上传图片一个set集合,添加套餐一个集合,定时作对比</p>
<h2 id="预约设置"><a href="#预约设置" class="headerlink" title="预约设置"></a>预约设置</h2><h5 id="批量导入预约设置信息"><a href="#批量导入预约设置信息" class="headerlink" title="批量导入预约设置信息:"></a>批量导入预约设置信息:</h5><blockquote>
<p>1、点击模板下载按钮下载Excel模板文件</p>
<p>2、将预约设置信息录入到模板文件中</p>
<p>3、点击上传文件按钮将录入完信息的模板文件上传到服务器</p>
<p>4、通过POI读取上传文件的数据并保存到数据库</p>
</blockquote>
<h2 id="移动端开发-体检预约"><a href="#移动端开发-体检预约" class="headerlink" title="移动端开发-体检预约"></a>移动端开发-体检预约</h2><blockquote>
<h4 id="1-1-1-基于手机API开发"><a href="#1-1-1-基于手机API开发" class="headerlink" title="1.1.1 基于手机API开发"></a>1.1.1 基于手机API开发</h4><p>手机端使用手机API，例如使用Android、ios 等进行开发，服务端只是一个数据提供者。手机端请求服务端获取数据（json、xml格式）并在界面进行展示。这种方式相当于传统开发中的C/S模式，即需要在手机上安装一个客户端软件。</p>
<p>这种方式需要针对不同的手机系统分别进行开发，目前主要有以下几个平台：</p>
<p>1、苹果ios系统版本，开发语言是Objective-C</p>
<p>2、安卓Android系统版本，开发语言是Java</p>
<p>3、微软Windows phone系统版本，开发语言是C#</p>
<p>4、塞班symbian系统版本，开发语言是C++</p>
<p>此种开发方式举例：手机淘宝、抖音、今日头条、大众点评</p>
<h4 id="1-1-2-基于手机浏览器开发"><a href="#1-1-2-基于手机浏览器开发" class="headerlink" title="1.1.2 基于手机浏览器开发"></a>1.1.2 基于手机浏览器开发</h4><p>生存在浏览器中的应用，基本上可以说是触屏版的网页应用。这种开发方式相当于传统开发中的B/S模式，也就是手机上不需要额外安装软件，直接基于手机上的浏览器进行访问。这就需要我们编写的html页面需要根据不同手机的尺寸进行自适应调节，目前比较流行的是html5开发。除了直接通过手机浏览器访问，还可以将页面内嵌到一些应用程序中，例如通过微信公众号访问html5页面。</p>
<p>这种开发方式不需要针对不同的手机系统分别进行开发，只需要开发一个版本，就可以在不同的手机上正常访问。</p>
<p>本项目会通过将我们开发的html5页面内嵌到微信公众号这种方式进行开发。</p>
<h4 id="1-1-3-混合开发"><a href="#1-1-3-混合开发" class="headerlink" title="1.1.3 混合开发"></a>1.1.3 混合开发</h4><p>是半原生半Web的混合类App。需要下载安装，看上去类似原生App，访问的内容是Web网页。其实就是把HTML5页面嵌入到一个原生容器里面。</p>
</blockquote>
<p>​        </p>
<blockquote>
<h5 id="预约流程如下："><a href="#预约流程如下：" class="headerlink" title="预约流程如下："></a>预约流程如下：</h5><p>1、在移动端首页点击体检预约，页面跳转到套餐列表页面</p>
<p>2、在套餐列表页面点击要预约的套餐，页面跳转到套餐详情页面</p>
<p>3、在套餐详情页面点击立即预约，页面跳转到预约页面</p>
<p>4、在预约页面录入体检人信息，包括手机号，点击发送验证码</p>
<p>5、在预约页面录入收到的手机短信验证码，点击提交预约，完成体检预约</p>
<h4 id="体检预约方法处理逻辑比较复杂，需要进行如下业务处理："><a href="#体检预约方法处理逻辑比较复杂，需要进行如下业务处理：" class="headerlink" title="体检预约方法处理逻辑比较复杂，需要进行如下业务处理："></a>体检预约方法处理逻辑比较复杂，需要进行如下业务处理：</h4><p>1、检查用户所选择的预约日期是否已经提前进行了预约设置，如果没有设置则无法进行预约</p>
<p>2、检查用户所选择的预约日期是否已经约满，如果已经约满则无法预约</p>
<p>3、检查用户是否重复预约（同一个用户在同一天预约了同一个套餐），如果是重复预约则无法完成再次预约</p>
<p>4、检查当前用户是否为会员，如果是会员则直接完成预约，如果不是会员则自动完成注册并进行预约</p>
<p>5、预约成功，更新当日的已预约人数</p>
</blockquote>
<h2 id="手机快速登录"><a href="#手机快速登录" class="headerlink" title="手机快速登录"></a>手机快速登录</h2><blockquote>
<h4 id="手机号校验"><a href="#手机号校验" class="headerlink" title="手机号校验:"></a>手机号校验:</h4><p>第一步：在页面导入的healthmobile.js文件中已经定义了校验手机号的方法</p>
<p>第二步：为发送验证码按钮绑定事件sendValidateCode,</p>
<h4 id="30秒倒计时效果"><a href="#30秒倒计时效果" class="headerlink" title="30秒倒计时效果:"></a>30秒倒计时效果:</h4><p>如果校验通过，需要显示30秒倒计时效果</p>
<p>基于定时器实现30秒倒计时效果</p>
<p>在按钮上显示30秒倒计时效果的同时，需要发送ajax请求，在后台给用户发送手机验证码并将验证码保存到redis</p>
<p>1、校验用户输入的短信验证码是否正确，如果验证码错误则登录失败</p>
<p>2、如果验证码正确，则判断当前用户是否为会员，如果不是会员则自动完成会员注册</p>
<p>3、向客户端写入Cookie，内容为用户手机号</p>
<p>4、将会员信息保存到Redis，使用手机号作为key，保存时长为30分钟</p>
</blockquote>
<h2 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制:"></a>权限控制:</h2><blockquote>
<p>问题1：在生产环境下我们如果不登录后台系统就可以完成这些功能操作吗？</p>
<p>答案显然是否定的，要操作这些功能必须首先登录到系统才可以。</p>
<p>问题2：是不是所有用户，只要登录成功就都可以操作所有功能呢？</p>
<p>答案是否定的，并不是所有的用户都可以操作这些功能。不同的用户可能拥有不同的权限，这就需要进行授权了。</p>
<p>认证：系统提供的用于识别用户身份的功能，通常提供用户名和密码进行登录其实就是在进行认证，认证的目的是让系统知道你是谁。</p>
<p>授权：用户认证成功后，需要为用户授权，其实就是指定当前用户可以操作哪些功能。</p>
<p>本章节就是要对后台系统进行权限控制，其本质就是对用户进行认证和授权。</p>
<p>Spring Security</p>
<p>配置文件与注解方式</p>
<p>第一步：在工程中按照Spring Security框架要求提供SpringSecurityUserService，并且实现UserDetailsService接口</p>
<p>​    通过dubbo远程调用用户服务</p>
<p>​    远程调用用户服务，根据用户名查询用户信息</p>
<p>​    授予角色</p>
<p>​    授权</p>
<p>例:@PreAuthorize(“hasAuthority(‘CHECKITEM_QUERY’)”)//权限校验</p>
<h4 id="对密码进行加密"><a href="#对密码进行加密" class="headerlink" title="对密码进行加密"></a>对密码进行加密</h4><h4 id="显示用户名"><a href="#显示用户名" class="headerlink" title="显示用户名"></a>显示用户名</h4><p>​    Spring Security在认证成功后会将用户信息保存到框架提供的上下文对象中，所以此处我们就可以调用Spring Security框架提供的API获取当前用户的username并展示到页面上。</p>
</blockquote>
<h2 id="会员数量折线图"><a href="#会员数量折线图" class="headerlink" title="会员数量折线图"></a>会员数量折线图</h2><blockquote>
<p>通过折线图可以直观的反映出会员数量的增长趋势。</p>
<p>第一步：将echarts.js文件复制到health_backend工程的plugins目录下</p>
<p>第二步：在report_member.html页面引入echarts.js文件</p>
<p>参照官方实例导入折线图</p>
<p>根据折线图对数据格式的要求，我们发送ajax请求</p>
</blockquote>
<blockquote>
<h6 id="套餐预约占比饼形图"><a href="#套餐预约占比饼形图" class="headerlink" title="套餐预约占比饼形图"></a>套餐预约占比饼形图</h6></blockquote>
<h4 id=""><a href="#" class="headerlink" title=""></a></h4><h2 id="运营数据统计"><a href="#运营数据统计" class="headerlink" title="运营数据统计"></a>运营数据统计</h2><blockquote>
<p>定义数据模型，通过VUE的数据绑定展示数据</p>
<p>在VUE的钩子函数中发送ajax请求获取动态数据，通过VUE的数据绑定将数据展示到页面</p>
<p>统计报表导出</p>
<p>在企业实际开发中，对于这种比较复杂的表格导出一般我们会提前设计一个Excel模板文件，在这个模板文件中提前将表格的结构和样式设置好，我们的程序只需要读取这个文件并在文件中的相应位置写入具体的值就可以了。</p>
</blockquote>
<h4 id="-1"><a href="#-1" class="headerlink" title=""></a></h4>]]></content>
      <categories>
        <category>项目</category>
      </categories>
  </entry>
</search>
